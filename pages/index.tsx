import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { request } from "@/libraries/request";
import { recentUpdatesRes, recentUpdatesResponse } from "@/@types/api";
import { useRouter } from "next/router";
import Link from "next/link";
import { MovieList } from "@/components/MovieList/MovieList";
import Styles from "@/styles/index.module.scss";
import styled from "styled-components";
import { WrapperProps } from "@/@types/Movie";
import { useIsomorphicEffect } from "@/libraries/IsomorphicEffect";

const Wrapper = styled.div.attrs((p: WrapperProps) => ({
  style: {
    "--width": `${p.itemWidth}px`,
  },
}))``;

const Index = () => {
  const router = useRouter();

  const [width, setWidth] = useState(360);
  const wrapper = useRef<HTMLDivElement>(null);
  const observer = useRef<ResizeObserver>();
  const [updates, setUpdates] = useState<recentUpdatesRes | undefined>();
  const isomorphicEffect = useIsomorphicEffect();
  const handleResize = () => {
    const width = wrapper.current?.clientWidth || 1920;
    const cardCount = Math.floor(width / 380) + 1;
    setWidth(width / cardCount - 20);
  };
  isomorphicEffect(() => {
    if (!observer.current) observer.current = new ResizeObserver(handleResize);
    if (!wrapper.current) return;
    handleResize();
    observer.current?.observe(wrapper.current);
  }, [wrapper.current]);
  useEffect(() => {
    void (async () => {
      const data = await request<recentUpdatesResponse>("/recentUpdates/");
      if (data.status === "fail") {
        void router.push(
          `/login?callback=${encodeURIComponent(router.asPath)}`
        );
        return;
      }
      setUpdates(data);
    })();
  }, []);
  return (
    <div className={Styles.wrapper}>
      <Head>
        <title>{process.env.NEXT_PUBLIC_SITE_NAME}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wrapper itemWidth={width} ref={wrapper}>
        {updates &&
          updates.data.map((update) => {
            return (
              <div key={update.seriesUrl}>
                <Link
                  href={`/series/${update.seriesUrl}`}
                  className={Styles.title}
                >
                  {update.title}
                </Link>
                <MovieList movies={update.movies} type={"row"} />
              </div>
            );
          })}
      </Wrapper>
    </div>
  );
};

export default Index;
