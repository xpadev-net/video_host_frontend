import Head from "next/head";
import { useLayoutEffect, useRef, useState } from "react";
import { request } from "@/libraries/request";
import { recentUpdates, recentUpdatesResponse } from "@/@types/api";
import { useRouter } from "next/router";
import Link from "next/link";
import { MovieList } from "@/components/MovieList/MovieList";
import Styles from "@/styles/index.module.scss";
import styled from "styled-components";
import { WrapperProps } from "@/@types/Movie";

const Wrapper = styled.div<WrapperProps>`
  --width: ${(p) => (p.itemWidth === undefined ? "unset" : `${p.itemWidth}px`)};
`;

const Index = () => {
  const router = useRouter();
  const [updates, setUpdates] = useState<recentUpdates | undefined>(undefined);

  const [width, setWidth] = useState(360);
  const wrapper = useRef<HTMLDivElement>(null);
  useLayoutEffect(() => {
    const handleResize = () => {
      const width = wrapper.current?.clientWidth || 1920;
      setWidth(width / (Math.floor(width / 385) + 1) - 20);
    };
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [wrapper.current]);
  useLayoutEffect(() => {
    void (async () => {
      const req = await request(`/recentUpdates/`);
      const res = (await req.json()) as recentUpdatesResponse;
      if (res.status === "fail") {
        void router.push("/login");
        return;
      }
      setUpdates(res.data);
    })();
  }, [router]);
  if (!updates) return <></>;

  return (
    <div ref={wrapper}>
      <Head>
        <title>{process.env.NEXT_PUBLIC_SITE_NAME}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wrapper itemWidth={width}>
        {updates.map((update) => {
          return (
            <div key={update.seriesUrl}>
              <Link
                href={`/series/${update.seriesUrl}`}
                className={Styles.title}
              >
                {update.title}
              </Link>
              <MovieList movies={update.movies} type={"row"} />
            </div>
          );
        })}
      </Wrapper>
    </div>
  );
};

export default Index;
